<html>

<head>
    <title>Statistics</title>
    <style>
        #customers {
            font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }

        #customers td,
        #customers th {
            border: 1px solid rgba(68, 196, 231, 0.8);
            padding: 8px;
        }

        #customers tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        #customers tr:hover {
            background-color: #ddd;
        }

        #customers th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: rgba(68, 196, 231, 0.8);
            color: white;
        }

        a {
            color: rgba(68, 196, 231, 0.8);
            text-decoration: none;
        }

        .offline {
            color: gray;
        }

        .online {}
    </style>
    <link rel="stylesheet" href="/public/elementui.css">
</head>

<body>
    <div id="app">
        <template>
            <el-table :data="list" :row-class-name="tableRowClassName" border style="width: 100%">
                <el-table-column prop="client_ip" label="客户端ip">
                </el-table-column>
                <el-table-column prop="name" label="名称">
                </el-table-column>
                <el-table-column prop="uptime" label="开机时长">
                </el-table-column>
                <el-table-column prop="boot_time" label="启动时间">
                </el-table-column>
                <el-table-column prop="is_online_text" label="在线">
                </el-table-column>
                <el-table-column prop="is_enable_text" label="启用">
                </el-table-column>
                <el-table-column prop="cpu" label="cpu">
                </el-table-column>
                <el-table-column prop="memory" label="内存">
                </el-table-column>
                <el-table-column prop="last_online_time" label="上次同步时间">
                </el-table-column>
                <el-table-column label="操作">
                    <template slot-scope="scope">
                        <template v-if="scope.row.is_online == 1">
                            <el-button size="mini" type="warning" @click="run(1, scope.row.id)">重启</el-button>
                            <el-button size="mini" type="danger" @click="run(2, scope.row.id)">关机
                            </el-button>
                        </template>
                    </template>
                </el-table-column>
                <el-table-column label="管理">
                    <template slot-scope="scope">
                        <el-button size="mini" @click="editPop(scope.row.id)">编辑</el-button>
                        <el-button size="mini" type="danger" @click="del(scope.row.id)">删除
                        </el-button>
                    </template>
                </el-table-column>
            </el-table>
        </template>


        <el-dialog title="编辑" :visible.sync="edit_pop" width="30%">
            <el-form ref="edit_form" :model="edit_form" label-width="80px">
                <el-form-item label="名称">
                    <el-input v-model="edit_form.name"></el-input>
                </el-form-item>
                <el-form-item label="客户ip">
                    <el-input v-model="edit_form.client_ip"></el-input>
                </el-form-item>
                <el-form-item label="启用">
                    <el-switch v-model="edit_form.is_enable" :active-value="1" :inactive-value="0"></el-switch>
                </el-form-item>
            </el-form>
            <span slot="footer" class="dialog-footer">
                <el-button @click="edit_pop = false">取 消</el-button>
                <el-button type="primary" @click="edit">确 定</el-button>
            </span>
        </el-dialog>
    </div>
    <script src="/public/zepto.js"></script>
    <script src="/public/vue.js"></script>
    <script src="/public/axios.js"></script>
    <script src="/public/elementui.js"></script>
    <script>
        var app = new Vue({
            el: '#app',
            data: {
                sort: ["is_online desc", "id asc"],
                list: [
                ],
                dataInter: null,
                user: "cpz",
                edit_pop: false,
                edit_form: {
                    id: "",
                    name: "",
                    client_ip: "",
                    is_enable: "",
                },
            },
            methods: {
                tableRowClassName: function ({ row, rowIndex }) {
                    if (row.is_online == 1) {
                        return "online";
                    } else {
                        return "offline";
                    }
                },
                getData: function () {
                    var _this = this;
                    axios.post("/get_statistics", {}).then(function (ret) {
                        if (ret.status) {
                            ret = ret.data;
                            ret = ret.sort(function (item1, item2) {
                                let v1 = "";
                                let v2 = "";
                                for (var i = 0, len = _this.sort.length; i < len; i++) {
                                    var s = _this.sort[i].split(" ");
                                    if (s[1] == "asc") {
                                        v1 += item1[s[0]];
                                        v2 += item2[s[0]];
                                    } else {
                                        v1 += item2[s[0]];
                                        v2 += item1[s[0]];
                                    }
                                }

                                return v1 > v2 ? 1 : -1;
                            });
                            for (var i = 0, len = ret.length; i < len; i++) {
                                var is_online = ret[i]["is_online"];
                                ret[i]["uptime"] = is_online ? _this.formatSeconds(ret[i]["uptime"]) : "";
                                ret[i]["is_online_text"] = is_online ? "在线" : "离线";
                                ret[i]["is_enable_text"] = ret[i]["is_enable"] ? "启动" : "停用";
                                ret[i]["cpu"] = is_online ? _this.accMul(_this.tofixed(ret[i]["cpu_user"] + ret[i]["cpu_system"], 4), 100) + "%" : "";
                                ret[i]["memory"] = is_online ? _this.getfilesize(ret[i]["memory_total"] - ret[i]["memory_free"]) + "/" + _this.getfilesize(ret[i]["memory_total"]) + " ( " + _this.tofixed((((ret[i]["memory_total"] - ret[i]["memory_free"]) / ret[i]["memory_total"]) * 100), 2) + "% )" : "";
                            }
                            _this.list = ret;
                        }
                    });
                },
                formatSeconds: function (value) {
                    var theTime = parseInt(value);// 需要转换的时间秒 
                    var theTime1 = 0;// 分 
                    var theTime2 = 0;// 小时 
                    var theTime3 = 0;// 天
                    if (theTime > 60) {
                        theTime1 = parseInt(theTime / 60);
                        theTime = parseInt(theTime % 60);
                        if (theTime1 > 60) {
                            theTime2 = parseInt(theTime1 / 60);
                            theTime1 = parseInt(theTime1 % 60);
                            if (theTime2 > 24) {
                                //大于24小时
                                theTime3 = parseInt(theTime2 / 24);
                                theTime2 = parseInt(theTime2 % 24);
                            }
                        }
                    }
                    var result = '';
                    if (theTime > 0) {
                        result = "" + parseInt(theTime) + "秒";
                    }
                    if (theTime1 > 0) {
                        result = "" + parseInt(theTime1) + "分" + result;
                    }
                    if (theTime2 > 0) {
                        result = "" + parseInt(theTime2) + "小时" + result;
                    }
                    if (theTime3 > 0) {
                        result = "" + parseInt(theTime3) + "天" + result;
                    }
                    return result;
                },
                getfilesize: function (size) {
                    if (!size)
                        return "";
                    var num = 1024.00; //byte
                    if (size < num)
                        return size + "B";
                    if (size < Math.pow(num, 2))
                        return (size / num).toFixed(2) + "K"; //kb
                    if (size < Math.pow(num, 3))
                        return (size / Math.pow(num, 2)).toFixed(2) + "M"; //M
                    if (size < Math.pow(num, 4))
                        return (size / Math.pow(num, 3)).toFixed(2) + "G"; //G
                    return (size / Math.pow(num, 4)).toFixed(2) + "T"; //T
                },
                accMul: function (arg1, arg2) {
                    var m = 0, s1 = arg1.toString(), s2 = arg2.toString();
                    try { m += s1.split(".")[1].length } catch (e) { }
                    try { m += s2.split(".")[1].length } catch (e) { }
                    return Number(s1.replace(".", "")) * Number(s2.replace(".", "")) / Math.pow(10, m)
                },
                tofixed: function (num, n) {
                    var symbol = 1
                    if (num < 0) {
                        // 符号为负
                        symbol = -1
                        num *= -1
                    }
                    var num2 = (Math.round(num * Math.pow(10, n))
                        / Math.pow(10, n) + Math.pow(10, -(n + 1)))
                        .toString().slice(0, -1)
                    return parseFloat(num2 * symbol).toFixed(n)
                },
                reLogin: function () {
                    alert("登录失效");
                    location.href = "/login";
                },
                clearUserInterval: function () {
                    clearInterval(this.dataInter);
                },
                run: function (type, id) {
                    var _this = this
                    var operation = type == 1 ? "shutdown" : "reboot"
                    this.$confirm('是否继续?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        axios.post("/operate", "client_id=" + id + "&operation=" + operation)
                            .then(function (ret) {
                                if (ret) {
                                    ret = ret.data;
                                    if (!ret.ok) {
                                        _this.$message({
                                            type: 'error',
                                            message: ret.message
                                        });
                                    }
                                }
                            })
                    });
                },
                del: function (id) {
                    var _this = this;
                    this.$confirm('此操作将永久删除该主机, 是否继续?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        axios.post("/delete_client", "client_id=" + id)
                            .then(function (ret) {
                                if (ret) {
                                    ret = ret.data;
                                    if (ret.ok) {
                                        _this.getData();
                                    } else {
                                        _this.$message({
                                            type: 'error',
                                            message: ret.message
                                        });
                                    }
                                }
                            })

                    });
                },
                editPop: function (id) {
                    for (let i = 0, len = this.list.length; i < len; i++) {
                        if (this.list[i]["id"] == id) {
                            this.edit_form = this.list[i];
                        }
                    }
                    this.edit_pop = true;
                },
                edit: function () {
                    var _this = this;
                    this.edit_form.client_id = this.edit_form.id;

                    axios.post("/edit_client", this.toFormData(this.edit_form, ["client_id", "name", "client_ip", "is_enable"]))
                        .then(function (ret) {
                            if (ret) {
                                ret = ret.data;
                                if (ret.ok) {
                                    _this.getData();
                                    _this.edit_pop = false;
                                } else {
                                    _this.$message({
                                        type: 'error',
                                        message: ret.message
                                    });
                                }
                            }
                        })
                },
                toFormData: function (o, fields) {
                    var isLimitField = fields.length > 0 ? true : false;
                    var t = [];
                    for (var i in o) {
                        if (isLimitField) {
                            if (fields.indexOf(i) >= 0) {
                                t.push(i+"="+o[i]);
                            }
                        } else {
                            t.push(i+"="+o[i]);
                        }
                    }
                    return t.join("&");
                }
                
            },
            mounted: function () {
                var _this = this;
                axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';
                axios.interceptors.response.use(function (response) {
                    return response;
                }, function (error) {
                    if (error.response.status == 403) {
                        _this.clearUserInterval();
                        _this.reLogin();
                    } else {
                        alert("网络错误");
                    }
                });
                this.getData();
                this.dataInter = setInterval(this.getData, 5000)
            }
        })
    </script>
</body>

</html>