<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Statistics</title>
    <link rel="shortcut icon" href="/public/monitor.png">
    <style>
        .el-row {
            margin-bottom: 20px;

            &:last-child {
                margin-bottom: 0;
            }
        }

        #customers {
            font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }

        #customers td,
        #customers th {
            border: 1px solid rgba(68, 196, 231, 0.8);
            padding: 8px;
        }

        #customers tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        #customers tr:hover {
            background-color: #ddd;
        }

        #customers th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: rgba(68, 196, 231, 0.8);
            color: white;
        }

        a {
            color: rgba(68, 196, 231, 0.8);
            text-decoration: none;
        }

        .el-table .offline {
            color: gray;
        }

        .el-table .online {
          }

        .el-table .apply-reject {
            color: gray;
          }

        .el-table .apply-pass {
            color: #71df65;
          }

        .dialog-footer {
            display: none;
        }

        .memory-chat {
            margin-top: 90px;
            text-align: center;
            padding-left: 50px;
            height: 350px;
        }

        #shell *::-webkit-scrollbar-track {
            border-radius: 8px;
            background-color: #353535;
        }

        #shell *::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        #shell *::-webkit-scrollbar-thumb {
            border-radius: 8px;
            -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,.3);
            background-color: #bcbcbc;
        }

        #shell {
            background: #222;
            max-width: 1200px;
            margin: 50px auto 0 auto;
            box-shadow: 0 0 5px rgba(0, 0, 0, .3);
            font-size: 10pt;
            display: flex;
            flex-direction: column;
            align-items: stretch;
            color: white;
        }

        #shell-content {
            height: 500px;
            overflow: auto;
            padding: 5px;
            white-space: pre-wrap;
            flex-grow: 1;
        }

        #shell-logo {
            font-weight: bold;
            color: #FF4180;
            text-align: center;
        }

        @media (max-width: 991px) {
            #shell-logo {
                font-size: 6px;
                margin: -25px 0;
            }

            html, body, #shell {
                height: 100%;
                width: 100%;
                max-width: none;
            }

            #shell {
                margin-top: 0;
            }
        }

        @media (max-width: 767px) {
            #shell-input {
                flex-direction: column;
            }
        }

        @media (max-width: 320px) {
            #shell-logo {
                font-size: 5px;
            }
        }

        .shell-prompt {
            font-weight: bold;
            color: #75DF0B;
        }

        .shell-prompt > span {
            color: #1BC9E7;
        }

        #shell-input {
            display: flex;
            box-shadow: 0 -1px 0 rgba(0, 0, 0, .3);
            border-top: rgba(255, 255, 255, .05) solid 1px;
        }

        #shell-input > label {
            flex-grow: 0;
            display: block;
            padding: 0 5px;
            height: 30px;
            line-height: 30px;
        }

        #shell-input #shell-cmd {
            height: 30px;
            line-height: 30px;
            border: none;
            background: transparent;
            color: #eee;
            font-family: monospace;
            font-size: 10pt;
            width: 100%;
            align-self: center;
        }

        #shell-input div {
            flex-grow: 1;
            align-items: stretch;
        }

        #shell-input input {
            outline: none;
        } 

        .pi-hole-card {
          color: white!important
        }

        [v-cloak] {
            display:none;
        }
    </style>
    <link rel="stylesheet" href="/public/elementui.css">
    <script src="/public/zepto.js"></script>
    <script src="/public/vue.js"></script>
    <script src="/public/axios.js"></script>
    <script src="/public/elementui.js"></script>
    <script src="/public/echats.js"></script>
    <script src="/public/vue-echats.js"></script>
</head>
<body>
    <div id="app" v-clock>
        <el-menu :default-active="activeIndex" class="el-menu-demo" mode="horizontal" @select="handleSelect" v-show="tab_show">
            <el-menu-item index="0">看板</el-menu-item>
            <el-menu-item index="1">客户端</el-menu-item>
            <el-menu-item index="2">CPU</el-menu-item>
            <el-menu-item index="3">内存</el-menu-item>
            <el-menu-item index="4">网络</el-menu-item>
            <el-menu-item index="5" id="terminal-index">Terminal</el-menu-item>
            <el-menu-item index="6">设置</el-menu-item>
        </el-menu>
        <div class="line"></div>

        <div class="submenu" v-if="activeIndex==0">
          <el-row :gutter="20">
            <el-col :span="12">
              <el-card class="box-card" v-loading="pihole_loading">
                <template v-if="!pihole_status">
                    {[ pihole_message ]}
                </template>
                
                <template v-if="pihole_status">
                <el-row :gutter="20">
                  <el-col :span="6">
                    <el-card class="box-card pi-hole-card" shadow="hover" style="background-color:#67C23A">
                      <p>总请求 ({[ pihole_data.statistics.unique_clients ]} 客户)</p>
                      <p>{[ pihole_data.statistics.dns_queries_today ]}</p>
                    </el-card>
                  </el-col>

                  <el-col :span="6">
                    <el-card class="box-card pi-hole-card" shadow="hover" style="background-color:#E6A23C">
                      <p>拦截请求</p>
                      <p>{[ pihole_data.statistics.ads_blocked_today ]}</p>
                    </el-card>
                  </el-col>

                  <el-col :span="6">
                    <el-card class="box-card pi-hole-card" shadow="hover" style="background-color:#F56C6C">
                      <p>拦截名单</p>
                      <p>{[ pihole_data.statistics.domains_being_blocked ]}</p>
                    </el-card>
                  </el-col>
                </el-row>

                <el-row>
                  <el-col :span="24">
                    <el-table
                      :data="pihole_data.domain_list.top_queries"
                      border
                      style="width: 100%">
                      <el-table-column
                        prop="domain"
                        label="域名">
                      </el-table-column>
                      <el-table-column
                        prop="count"
                        label="次数">
                      </el-table-column>
                    </el-table>
                  </el-col>
                </el-row>
                </template>
              </el-card>
            </el-col>
            <el-col :span="6"></el-col>
          </el-row>

        </div>

        <div v-show="activeIndex==1" class="submenu">
            <el-row type="flex" justify="center">
                <el-table :data="list" :row-class-name="tableRowClassName" v-loading="list_loading"
                :header-cell-style="{height:'20px', 'font-size':'15px'}"
                :cell-style="{'font-size':'14px'}"
                empty-text=" ">
                    <el-table-column prop="client_ip" header-align="left" fixed label="客户端ip" width="120px">
                    </el-table-column>
                    <el-table-column prop="name" header-align="left" fixed label="名称" width="200px">
                    </el-table-column>
                    <el-table-column prop="cpu" header-align="left" label="cpu" width="100px">
                    </el-table-column>
                    <el-table-column prop="memory" header-align="left" label="内存" width="210px">
                    </el-table-column>
                    <el-table-column prop="disk" header-align="left" label="磁盘" width="210px">
                    </el-table-column>
                    <el-table-column header-align="left" label="包管理器" width="200px">
                        <template slot-scope="scope">
                            <span v-html="scope.row.package_manager"></span> <a style="cursor: pointer;"
                                @click="run(3, scope.row.id)" v-if="scope.row.package_manager">更新</a>
                        </template>
                    </el-table-column>
                    <el-table-column prop="cpu_temp" header-align="left" label="CPU温度" width="220px">
                    </el-table-column>
                    <el-table-column prop="last_online_time" header-align="left" label="上次同步时间" width="220px">
                    </el-table-column>
                    <el-table-column prop="uptime" header-align="left" label="开机时长" width="240px">
                    </el-table-column>
                    <el-table-column prop="boot_time" header-align="left" label="启动时间" width="180px">
                    </el-table-column>
                    <el-table-column prop="is_enable_text" header-align="left" label="启用" width="70px">
                    </el-table-column>
                    <el-table-column prop="system_version" header-align="left" label="系统版本" width="280px">
                    </el-table-column>
                    <el-table-column label="管理" header-align="left" width="230px">
                        <template slot-scope="scope">
                            <el-button size="mini" @click="tasks(scope.row.id)">任务</el-button>
                            <el-button size="mini" @click="editPop(scope.row.id)">编辑</el-button>
                            <el-button size="mini" type="danger" @click="del(scope.row.id)">删除</el-button>
                        </template>
                    </el-table-column>
                    <el-table-column label="操作" header-align="left" fixed="right" width="240px">
                        <template slot-scope="scope">
                            <template v-if="scope.row.is_online == 1">
                                <el-button size="mini" type="warning" @click="run(2, scope.row.id)">重启</el-button>
                                <el-button size="mini" type="danger" @click="run(1, scope.row.id)">关机</el-button>
                            </template>
                            <el-button size="mini" type="primary" @click="connectTerminal(scope.row.id, scope.row.ssh_address)">Terminal</el-button>
                        </template>
                    </el-table-column>
                </el-table>
            </el-row>
            <el-row type="flex" justify="end">
                <el-badge :value="applyCount" class="item">
                    <a style="cursor: pointer;font-size:15px" @click="clientApplyPop()" v-show="!list_loading">申请记录</a>
                </el-badge>
                &nbsp;&nbsp;&nbsp;&nbsp;
                <a style="cursor: pointer;font-size:15px" @click="addClientPop()" v-show="!list_loading">添加客户端</a>
            </el-row>
        </div>

        <el-dialog title="编辑" :visible.sync="edit_pop" width="30%">
            <el-form ref="edit_form" :model="edit_form" label-width="80px">
                <el-form-item label="名称">
                    <el-input v-model="edit_form.name"></el-input>
                </el-form-item>
                <el-form-item label="客户ip">
                    <el-input v-model="edit_form.client_ip"></el-input>
                </el-form-item>
                <el-form-item label="SSH地址">
                    <el-input v-model="edit_form.ssh_address"></el-input>
                </el-form-item>
                <el-form-item label="SSH用户">
                    <el-input v-model="edit_form.ssh_username"></el-input>
                </el-form-item>
                <el-form-item label="SSH密码">
                    <el-input v-model="edit_form.ssh_password" type="password"></el-input>
                </el-form-item>
                <el-form-item label="启用">
                    <el-switch v-model="edit_form.is_enable" :active-value="1" :inactive-value="0"></el-switch>
                </el-form-item>
            </el-form>
            <span slot="footer" class="dialog-footer">
                <el-button @click="edit_pop = false">取 消</el-button>
                <el-button type="primary" @click="edit">确 定</el-button>
            </span>
        </el-dialog>

        <el-dialog title="新增客户端" :visible.sync="add_client_pop" width="30%">
            <el-form ref="add_client_from" :model="add_client_form" label-width="80px">
                <el-form-item label="名称">
                    <el-input v-model="add_client_form.name"></el-input>
                </el-form-item>
                <el-form-item label="客户ip">
                    <el-input v-model="add_client_form.client_ip"></el-input>
                </el-form-item>
                <el-form-item label="SSH地址">
                    <el-input v-model="add_client_form.ssh_address"></el-input>
                </el-form-item>
                <el-form-item label="SSH用户">
                    <el-input v-model="add_client_form.ssh_username"></el-input>
                </el-form-item>
                <el-form-item label="SSH密码">
                    <el-input v-model="add_client_form.ssh_password" type="password"></el-input>
                </el-form-item>
            </el-form>
            <span slot="footer" class="dialog-footer">
                <el-button @click="add_client_pop = false">取 消</el-button>
                <el-button type="primary" @click="addClient">确 定</el-button>
            </span>
        </el-dialog>

        <el-dialog title="任务列表" :visible.sync="task_pop" @close="taskList=[];task_list_loading=true">
            <el-table :data="taskList" border style="max-height: 535px;" :row-class-name="taskRowClassName"
                v-loading="task_list_loading">
                <el-table-column prop="task_type" label="任务类型">
                </el-table-column>
                <el-table-column prop="created_at" label="创建时间">
                </el-table-column>
                <el-table-column prop="pulled_at" label="执行时间">
                </el-table-column>
                <el-table-column prop="cancled_at" label="取消时间">
                </el-table-column>
                <el-table-column label="操作">
                    <template slot-scope="scope">
                        <template v-if="!scope.row.pulled_at && scope.row.is_valid">
                            <el-button size="mini" type="warning"
                                @click="cancelTask(scope.row.id, scope.row.client_id)">取消任务</el-button>
                            </el-button>
                        </template>
                    </template>
                </el-table-column>
            </el-table>
        </el-dialog>

        <el-dialog title="申请记录" :visible.sync="client_apply_pop" @open="getClientApplyData" width="80%">
            <el-table :data="applyList" border style="max-height: 535px;"
                v-loading="client_apply_list_loading" :row-class-name="applyTableRowClassName">
                <el-table-column prop="machine_id" label="机器ID">
                </el-table-column>
                <el-table-column prop="client_ip" label="IP">
                </el-table-column>
                <el-table-column prop="status" label="状态">
                </el-table-column>
                <el-table-column prop="created_at" label="申请时间">
                </el-table-column>
                <el-table-column prop="updated_at" label="审批时间">
                </el-table-column>
                <el-table-column label="操作">
                    <template slot-scope="scope">
                        <el-button size="mini" type="success"
                            @click="passApply(scope.row.id, scope.row.client_id)" :disabled="scope.row.status != APPLY_WAIT_TXT">同意</el-button>
                        </el-button>
                        <el-button size="mini" type="danger"
                            @click="rejectApply(scope.row.id, scope.row.client_id)" :disabled="scope.row.status != APPLY_WAIT_TXT">拒绝</el-button>
                        </el-button>
                    </template>
                </el-table-column>
            </el-table>
        </el-dialog>

        <div class="memory-chat submenu" v-if="activeIndex==2 && cpu_chart_show">
            <v-chart :options="cpu_chart"/>
        </div>

        <div class="memory-chat submenu" v-if="activeIndex==3 && memory_chart_show">
            <v-chart :options="memory_chart"/>
        </div>

        <div class="memory-chat submenu" v-if="activeIndex==4">
            <div><v-chart :options="net_rx_byte_chart"/></div>
            <br/>
            <br/>
            <br/>
            <br/>
            <div><v-chart :options="net_tx_byte_chart"/></div>
        </div>

        <div v-show="activeIndex==5" id="terminal" @click="focusTerminal(event)">
           <div id="shell">
              <pre id="shell-content" v-html="terminal_content">
              </pre>
              <div id="shell-input">
                  <label for="shell-cmd" id="shell-prompt" class="shell-prompt" v-html="terminal_prompt"></label>
                  <div>
                      <input id="shell-cmd" name="cmd" v-model.trim="terminal_command" @keydown="onShellCmdKeyDown(event)" autocomplete="off" :disabled="!terminal_command_enable"/>
                  </div>
              </div>
          </div>
        </div>

        <div class="submenu" v-if="activeIndex==6">
            <el-row>
              <el-col :span="24">
                <div class="grid-content bg-purple-dark">
                  <el-form ref="setting_form" :model="setting_form" label-width="200px"
                  label-position="left" size="small">
                      <el-form-item label="Pilehole服务器地址">
                        <el-input v-model="setting_form.pihole_server" style="width:30%"></el-input>
                      </el-form-item>
                      <el-form-item label="Pilehole webpassword">
                        <el-input v-model="setting_form.pihole_web_password" style="width:30%"></el-input>
                      </el-form-item>
                      <el-form-item label="Elastic服务器地址">
                        <el-input v-model="setting_form.es_server" style="width:30%"></el-input>
                      </el-form-item>
                      <el-form-item label="K8s服务器地址">
                        <el-input v-model="setting_form.k8s_server" style="width:30%"></el-input>
                      </el-form-item>
                      <el-form-item>
                        <el-button type="primary" @click="saveSetting">保存</el-button>
                        <el-button>取消</el-button>
                      </el-form-item>
                    </el-form>
                </div>
              </el-col>
            </el-row>
        </div>
    </div>
    <style>
        .echarts {
            width: 100%;
            height: 100%;
        }

        .submenu {
            padding: 10px;
        }
    </style>
    <script>
        Vue.component('v-chart', VueECharts)
        var APPLY_REJECT_TXT = "已拒绝";
        var APPLY_PASS_TXT = "已通过";
        var APPLY_WAIT_TXT = "待审核";
        var app = new Vue({
            el: '#app',
            delimiters: ['{[', ']}'],
            data: {
                tab_show: false,
                activeIndex: 0,
                intervals: [],
                // client
                user: "",
                list: [],
                edit_pop: false,
                list_loading: true,
                add_client_pop: false,
                sort: ["is_online desc", "id asc"],
                edit_form: {
                    id: "",
                    name: "",
                    client_ip: "",
                    is_enable: "",
                    ssh_address: "",
                    ssh_username: "",
                    ssh_password: "",
                },
                add_client_form: {
                    name: "",
                    client_ip: "",
                    ssh_address: "",
                    ssh_username: "",
                    ssh_password: "",
                },
                setting_form: {
                    pihole_server: "",
                    pihole_web_password: "",
                    es_server: "",
                    k8s_server: "",
                },
                // memory
                memory_chart: {},
                memory_chart_show: false,
                memory_chart_init: false,
                // cpu
                cpu_chart: {},
                cpu_chart_show: false,
                cpu_chart_init: false,
                // net
                net_chart_show: false,
                net_rx_byte_chart: {},
                net_rx_byte_chart_init: false,

                net_tx_byte_chart: {},
                net_tx_byte_chart_init: false,
                
                // task
                task_pop: false,
                task_list_loading: true,
                taskList: [
                ],
                // client apply
                applyCount: null,
                client_apply_pop: false,
                client_apply_list_loading: true,
                applyList: [
                ],
                // terminal
                teriminalId: 0,
                terminal: null,
                terminal_command: '',
                terminal_command_enable: false,
                terminal_content: "<span style='color:red'>Please connect to the server first</span>",
                terminal_prompt: "",
                history_position: 0,
                history_commands: [],
                // pihole
                pihole_status: false,
                pihole_message: "请先设置Pihole相关配置",
                pihole_loading: true,
                pihole_data: {
                  domain_list: {
                    top_queries: []
                  },
                  statistics: {
                    ads_blocked_today: 0,
                    dns_queries_today: 0,
                    domains_being_blocked: 0,
                    unique_clients: 0,
                  } 
                } 
            },
            methods: {
                // client
                tableRowClassName: function ({ row, rowIndex }) {
                    if (row.is_online == 1) {
                        return "online";
                    } else {
                        return "offline";
                    }
                },
                getData: function () {
                    var _this = this;
                    axios.post("/get_statistics", {}).then(function (ret) {
                        if (ret.status) {
                            ret = ret.data;
                            ret = ret.sort(function (item1, item2) {
                                let v1 = "";
                                let v2 = "";
                                for (var i = 0, len = _this.sort.length; i < len; i++) {
                                    var s = _this.sort[i].split(" ");
                                    if (s[1] == "asc") {
                                        v1 += item1[s[0]];
                                        v2 += item2[s[0]];
                                    } else {
                                        v1 += item2[s[0]];
                                        v2 += item1[s[0]];
                                    }
                                }

                                return v1 > v2 ? 1 : -1;
                            });
                            for (var i = 0, len = ret.length; i < len; i++) {
                                var is_online = ret[i]["is_online"];
                                ret[i]["uptime"] = is_online ? _this.formatSeconds(ret[i]["uptime"]) : "";
                                ret[i]["cpu_temp"] = is_online ? ret[i]["cpu_temp"] + "℃" : "";
                                ret[i]["is_enable_text"] = ret[i]["is_enable"] ? "是" : "否";
                                ret[i]["cpu"] = is_online ? _this.accMul(_this.tofixed(ret[i]["cpu_user"] + ret[i]["cpu_system"], 4), 100) + "%" : "";
                                ret[i]["disk"] = is_online ? _this.getfilesize(ret[i]["disk_total"] - ret[i]["disk_avail"]) + "/" + _this.getfilesize(ret[i]["disk_total"]) + " ( " + _this.tofixed((((ret[i]["disk_total"] - ret[i]["disk_avail"]) / ret[i]["disk_total"]) * 100), 2) + "% )" : "";
                                ret[i]["memory"] = is_online ? _this.getfilesize(ret[i]["memory_total"] - ret[i]["memory_free"]) + "/" + _this.getfilesize(ret[i]["memory_total"]) + " ( " + _this.tofixed((((ret[i]["memory_total"] - ret[i]["memory_free"]) / ret[i]["memory_total"]) * 100), 2) + "% )" : "";
                                ret[i]["package_manager"] = is_online && ret[i]["package_manager_update_count"] ? ret[i]["package_manager_update_count"] + " updates avaliable" : "";
                            }
                            _this.list = ret;
                        }
                    }).then(function () {
                        _this.list_loading = false;
                    });
                },
                del: function (id) {
                    var _this = this;
                    this.$confirm('此操作将永久删除该主机, 是否继续?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        axios.post("/delete_client", "client_id=" + id)
                            .then(function (ret) {
                                if (ret) {
                                    ret = ret.data;
                                    if (ret.ok) {
                                        _this.getData();
                                    } else {
                                        _this.$message({
                                            type: 'error',
                                            message: ret.message
                                        });
                                    }
                                }
                            })

                    });
                },
                edit: function () {
                    var _this = this;
                    this.edit_form.client_id = this.edit_form.id;

                    axios.post("/edit_client", this.toFormData(this.edit_form, ["client_id", "name", "client_ip", "is_enable", "ssh_address", "ssh_username", "ssh_password"]))
                        .then(function (ret) {
                            if (ret) {
                                ret = ret.data;
                                if (ret.ok) {
                                    _this.getData();
                                    _this.edit_pop = false;
                                } else {
                                    _this.$message({
                                        type: 'error',
                                        message: ret.message
                                    });
                                }
                            }
                        })
                },
                saveSetting: function () {
                    var _this = this;
                    axios.post("/save_setting", this.toFormData(this.setting_form, ["pihole_server", "pihole_web_password", "es_server", "k8s_server"]))
                        .then(function (ret) {
                            if (ret) {
                                ret = ret.data;
                                if (ret.ok) {
                                    _this.$message({
                                        type: 'success',
                                        message: "保存成功"
                                    });
                                } else {
                                    _this.$message({
                                        type: 'error',
                                        message: ret.message
                                    });
                                }
                            }
                        })
                },
                addClient: function () {
                    var _this = this;
                    axios.post("/add_client", this.toFormData(this.add_client_form, ["name", "client_ip", "ssh_address", "ssh_username", "ssh_password"]))
                        .then(function (ret) {
                            if (ret) {
                                ret = ret.data;
                                if (ret.ok) {
                                    _this.getData();
                                    _this.add_client_pop = false;
                                    _this.add_client_form = {
                                        name: "",
                                        client_ip: "",
                                    };
                                } else {
                                    _this.$message({
                                        type: 'error',
                                        message: ret.message
                                    });
                                }
                            }
                        })
                },
                editPop: function (id) {
                    for (let i = 0, len = this.list.length; i < len; i++) {
                        if (this.list[i]["id"] == id) {
                            this.edit_form = this.list[i];
                        }
                    }
                    this.edit_pop = true;
                },
                addClientPop: function () {
                    this.add_client_pop = true;
                },
                run: function (type, id) {
                    var _this = this
                    var operation
                    switch (type) {
                        case 1:
                            operation = "shutdown"
                            break
                        case 2:
                            operation = "reboot"
                            break
                        case 3:
                            operation = "update"
                            break
                    }
                    this.$confirm('是否继续?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        axios.post("/operate", "client_id=" + id + "&operation=" + operation)
                            .then(function (ret) {
                                if (ret) {
                                    ret = ret.data;
                                    if (!ret.ok) {
                                        _this.$message({
                                            type: 'error',
                                            message: ret.message
                                        });
                                    }
                                }
                            })
                    });
                },
                // task
                taskRowClassName: function ({ row, rowIndex }) {
                    if (!row.pulled_at && row.is_valid) {
                        return "online";
                    } else {
                        return "offline";
                    }
                },
                tasks: function (id) {
                    var _this = this;
                    _this.task_pop = true;
                    axios.post("/tasks", "client_id=" + id).then(function (ret) {
                        if (ret.status) {
                            ret = ret.data;
                            _this.taskList = ret;
                        }
                    }).then(function () {
                        _this.task_list_loading = false;
                    });

                },
                cancelTask: function (id, client_id) {
                    var _this = this;
                    axios.post("/cancel_task", "task_id=" + id)
                        .then(function (ret) {
                            if (ret) {
                                ret = ret.data;
                                if (ret.ok) {
                                    _this.tasks(client_id);
                                } else {
                                    _this.$message({
                                        type: 'error',
                                        message: ret.message
                                    });
                                }
                            }
                        })
                },
                // memory
                getMemoryChart: function () {
                    var _this = this;
                    axios.post("/get_memory_chart", {}).then(function (ret) {
                        if (ret.status) {
                            ret = ret.data;
                            let legend = [];
                            let xAxis = [];
                            let series = {};
                            for (let i = 0, len = ret.length; i < len; i++) {
                                let name = ret[i]["name"];
                                let rate = _this.tofixed((ret[i]["memory_total"] - ret[i]["memory_free"]) / ret[i]["memory_total"] * 100, 0);
                                let date = _this.getLastDate(ret[i]["time"]);
                                if (legend.indexOf(name) == -1) {
                                    legend.push(name);
                                    series[name] = {
                                        name: name,
                                        type: "line",
                                        data: [rate]
                                    };
                                } else {
                                    series[name]["data"].push(rate);
                                }

                                if (xAxis.indexOf(date) == -1) {
                                    xAxis.push(date);
                                }
                            }

                            series = Object.values(series);
                            lengend = legend.sort((left, right) => {
                                return left > right ? 1 : -1;
                            })
                            series = series.sort((left, right) => {
                                return left.name > right.name ? 1 : -1;
                            })

                            if (ret.length > 0) {
                                var data = {
                                    title: { "text": "内存占用" },
                                    tooltip: {
                                        show:true,
                                    },
                                    legend: {
                                        data: legend,
                                    },
                                    yAxis: {},
                                    xAxis: {
                                        data: xAxis,
                                    },
                                    series: series,
                                };
                                if (!_this.memory_chart_init) {
                                    _this.memory_chart_init = true;
                                    _this.memory_chart = data;
                                } else {
                                   if (Array.from(_this.memory_chart.legend.data).sort().toString() == data.legend.data.sort().toString()) {
                                      _this.memory_chart = Object.assign(_this.memory_chart, data);
                                   } else {
                                      _this.memory_chart = data;
                                   }
                                }
                                _this.memory_chart_show = true;
                            }
                        }
                    }).then(function () {
                    });
                },
                // cpu
                getCpuChart: function () {
                    var _this = this;
                    axios.post("/get_cpu_chart", {}).then(function (ret) {
                        if (ret.status) {
                            ret = ret.data;
                            let legend = [];
                            let xAxis = [];
                            let series = {};
                            for (let i = 0, len = ret.length; i < len; i++) {
                                let name = ret[i]["name"];
                                let rate = _this.accMul(_this.tofixed(ret[i]["cpu_user"] + ret[i]["cpu_system"], 2), 100);
                                let date = _this.getLastDate(ret[i]["time"]);
                                if (legend.indexOf(name) == -1) {
                                    legend.push(name);
                                    series[name] = {
                                        name: name,
                                        type: "line",
                                        data: [rate]
                                    };
                                } else {
                                    series[name]["data"].push(rate);
                                }

                                if (xAxis.indexOf(date) == -1) {
                                    xAxis.push(date);
                                }
                            }

                            series = Object.values(series);
                            lengend = legend.sort((left, right) => {
                                return left > right ? 1 : -1;
                            })
                            series = series.sort((left, right) => {
                                return left.name > right.name ? 1 : -1;
                            })

                            if (ret.length > 0) {
                                var data = {
                                    title: { "text": "CPU占用" },
                                    tooltip: {
                                        show:true,
                                    },
                                    yAxis: {},
                                    xAxis: {
                                        data: xAxis,
                                    },
                                    series: series,
                                    legend: {
                                        data: legend,
                                    },
                                  };
                                if (!_this.cpu_chart_init) {
                                    _this.cpu_chart_init = true;
                                    _this.cpu_chart = data;
                                } else {
                                   if (Array.from(_this.cpu_chart.legend.data).sort().toString() == data.legend.data.sort().toString()) {
                                      _this.cpu_chart = Object.assign(_this.cpu_chart, data);
                                   } else {
                                      _this.cpu_chart = data;
                                   }
                                }
                                _this.cpu_chart_show = true;
                            }
                        }
                    }).then(function () {
                    });
                },
                // net
                getByteChart: function (direction) {
                    var _this = this;
                    axios.post("/get_byte_chart", {direction: direction, duration: "3i"}).then(function (ret) {
                        if (ret.status) {
                            ret = ret.data;
                            let legend = [];
                            let xAxis = [];
                            let series = {};
                            for (let i = 0, len = ret.length; i < len; i++) {
                                let name = ret[i]["name"];
                                let flow = ret[i]["byte"];
                                let date = _this.getLastDate(ret[i]["time"]);
                                if (legend.indexOf(name) == -1) {
                                    legend.push(name);
                                    series[name] = {
                                        name: name,
                                        type: "line",
                                        data: [flow]
                                    };
                                } else {
                                    series[name]["data"].push(flow);
                                }

                                if (xAxis.indexOf(date) == -1) {
                                    xAxis.push(date);
                                }
                            }

                            series = Object.values(series);
                            lengend = legend.sort((left, right) => {
                                return left > right ? 1 : -1;
                            })
                            series = series.sort((left, right) => {
                                return left.name > right.name ? 1 : -1;
                            })

                            if (ret.length > 0) {
                                var data = {
                                    tooltip: {
                                        show: true,
                                        formatter: function (params) {
                                            return params.seriesName + ": " + _this.bytesToSize(params.value);   
                                        } 
                                    },
                                    yAxis: {
                                        axisLabel: {
                                            formatter: function (value, index) {
                                                return _this.bytesToSize(value);
                                              }
                                          }
                                    },
                                    xAxis: {
                                        data: xAxis,
                                    },
                                    series: series,
                                    legend: {
                                        data: legend,
                                    },
                                  };

                                if (direction == 0) {
                                    data["title"] = {"text" : "实时流量 (下行)"};
                                    if (!_this.net_rx_byte_chart_init) {
                                        _this.net_rx_byte_chart_init = true;
                                        _this.net_rx_byte_chart = data;
                                    } else {
                                       if (Array.from(_this.net_rx_byte_chart.legend.data).sort().toString() == data.legend.data.sort().toString()) {
                                          _this.net_rx_byte_chart = Object.assign(_this.net_rx_byte_chart, data);
                                       } else {
                                          _this.net_rx_byte_chart = data;
                                       }
                                    }
                                } else {
                                    data["title"] = {"text" : "实时流量 (上行)"};
                                    if (!_this.net_tx_byte_chart_init) {
                                        _this.net_tx_byte_chart_init = true;
                                        _this.net_tx_byte_chart = data;
                                    } else {
                                       if (Array.from(_this.net_tx_byte_chart.legend.data).sort().toString() == data.legend.data.sort().toString()) {
                                          _this.net_tx_byte_chart = Object.assign(_this.net_tx_byte_chart, data);
                                       } else {
                                          _this.net_tx_byte_chart = data;
                                       }
                                    }
                                }

                                _this.net_chart_show = true;
                            }
                        }
                    }).then(function () {
                    });
                },
                // client apply
                getClientApplyData: function () {
                    var _this = this;
                    return axios.post("/client_applys").then(function (ret) {
                        if (ret.status) {
                            ret = ret.data;
                            for (var i = 0, len = ret.length; i < len; i++) {
                                ret[i]["status"] = ret[i]["status"] == 2 ? APPLY_REJECT_TXT : (ret[i]["status"] == 1 ? APPLY_PASS_TXT : APPLY_WAIT_TXT);  
                            }
                            _this.applyList = ret;
                        }
                    }).then(function () {
                        _this.client_apply_list_loading = false;
                    });
                },
                getClientApplyCount: function () {
                    var _this = this;
                    return axios.post("/client_applys").then(function (ret) {
                        if (ret.status) {
                            ret = ret.data;
                            var count = 0;
                            for (var i = 0, len = ret.length; i < len; i++) {
                              if (ret[i]["status"] == 0) {
                                  count++;
                                }
                            }
                            _this.applyCount = count > 0 ? count : null;
                        }
                    });
                  },
                getSetting: function () {
                    var _this = this;
                    return axios.post("/get_setting").then(function (ret) {
                        if (ret.status) {
                            _this.setting_form = ret.data;
                        }
                    });
                  },
                passApply: function (id) {
                    var _this = this;
                    axios.post("/pass_apply", "id=" + id)
                        .then(function (ret) {
                            if (ret) {
                                ret = ret.data;
                                if (ret.ok) {
                                    _this.getClientApplyData();
                                } else {
                                    _this.$message({
                                        type: 'error',
                                        message: ret.message
                                    });
                                }
                            }
                        })
                },
                rejectApply: function (id) {
                    var _this = this;
                    axios.post("/reject_apply", "id=" + id)
                        .then(function (ret) {
                            if (ret) {
                                ret = ret.data;
                                if (ret.ok) {
                                    _this.getClientApplyData();
                                } else {
                                    _this.$message({
                                        type: 'error',
                                        message: ret.message
                                    });
                                }
                            }
                        })
                },
                clientApplyPop: function () {
                    this.client_apply_pop = true;
                },
                applyTableRowClassName: function({row, rowIndex}) {
                    switch(row.status) {
                        case APPLY_PASS_TXT:
                          return "apply-pass";
                        case APPLY_REJECT_TXT:
                          return "apply-reject";
                        case APPLY_WAIT_TXT:
                        default:
                          return "";
                      }
                },
                // terminal
                connectTerminal: function (id, address) {
                    let _this = this;
                    if (this.teriminalId != id) {
                        axios.post("/connect_ssh_client", "client_id=" + id)
                        .then(function (ret) {
                            if (ret) {
                                ret = ret.data;
                                if (ret.ok) {
                                    _this.activeIndex = 5;
                                    _this.teriminalId = id;
                                    _this.terminal_content = address + " connect ok\r\n";
                                    _this.terminal_command_enable = true;
                                    _this.terminal_command = "";
                                    setTimeout(function () {
                                        document.getElementById("shell-cmd").focus();
                                      });
                                } else {
                                    _this.$message({
                                        type: 'error',
                                        message: ret.message
                                    })
                                }
                            }
                        })
                    } else {
                      _this.activeIndex = 5;
                      document.getElementById("shell-cmd").focus();
                    }
                },
                runTerminalCommand: function (command) {
                    var _this = this;
                    return axios.post("/run_ssh_command", "client_id=" + Number(this.teriminalId) + "&command=" + String(command))
                    .then(function (ret) {
                        if (ret) {
                            ret = ret.data;
                            if (ret.ok) {
                                var separator = "--separator--";
                                var message = ret.message.split(separator);
                                _this.terminal_content += _this.escapeHtml(message[0]);
                                setTimeout(function () {
                                    document.getElementById("shell-content").scrollTop = document.getElementById("shell-content").scrollHeight; 
                                  }, 1);
                                _this.updateCwd(message[1]);
                            } else {
                                _this.$message({
                                    type: 'error',
                                    message: ret.message
                                });
                            }
                        }
                        return  new Promise(function(resolve, reject) {
                            resolve(ret);
                        })
                    })
                },
                onShellCmdKeyDown: function (event) {
                    switch (event.key) {
                        case "Enter":
                            this.featureShell(this.terminal_command);
                            this.insertHistory(this.terminal_command);
                            this.terminal_command = "";
                            break;
                        case "ArrowUp": 
                            if (this.history_position > 0) {
                                this.history_position--;
                                this.terminal_command = this.history_commands[this.history_position];
                            }
                            break;
                        case "ArrowDown":
                            if (this.history_position > this.history_commands.length) {
                                return "";
                            }
                            this.history_position++;
                            if (this.history_position == this.history_commands.length) {
                                this.terminal_command = "";    
                            } else {
                                this.terminal_command = this.history_commands[this.history_position];    
                            }
                            break;
                        case "Tab":
                            event.preventDefault();
                            this.featureHint();
                            break;
                    }
                },
                insertHistory: function (command) {
                    this.history_commands.push(command);
                    this.history_position = this.history_commands.length;
                },
                insertCommand: function (command) {
                    this.terminal_content += '\n\n'+
                                             '<span class="shell-prompt">' + this.genPrompt(this.cwd) + '</span> ' + 
                                             this.escapeHtml(command) + 
                                             '\n';
                },
                featureShell: function (command) {
                    this.insertCommand(command);
                    if (/^\s*clear\s*$/.test(command)) {
                        this.terminal_content = "";
                    } else {
                        this.runTerminalCommand(command);
                    }
                },
                featureHint: function () {
                    if (this.terminal_command == "") {
                        return;
                      }

                    var _this = this;
                    var commandParams = this.terminal_command.split(" ");
                    var realCommand;
                    if (commandParams.length == 1) {
                        realCommand = "compgen -c " + commandParams[0];
                    } else {
                        realCommand = "compgen -f " + commandParams[commandParams.length - 1];
                    }
                    this.insertCommand(this.terminal_command);
                    this.runTerminalCommand(realCommand).then(function (ret) {
                      if (ret && ret.ok == 1) {
                          var separator = "--separator--";
                          var message = ret.message.split(separator);
                          var finds = message[0].split("\n");
                          if (finds.length == 2) {
                            commandParams[commandParams.length-1] = finds[0];
                             _this.terminal_command = commandParams.join(" ");
                            }
                        }
                    });
                },
                updateCwd: function (cwd) {
                    if (cwd) {
                        this.cwd = cwd;
                        this.updatePrompt();
                        return;
                    } 
                    this.updatePrompt();
                },
                updatePrompt: function () {
                    this.terminal_prompt = this.genPrompt(this.cwd);
                },
                genPrompt: function (cwd) {
                    cwd = cwd || "~";
                    var shortCwd = cwd;
                    if (cwd.split("/").length > 3) {
                        var splittedCwd = cwd.split("/");
                        shortCwd = "…/" + splittedCwd[splittedCwd.length-2] + "/" + splittedCwd[splittedCwd.length-1];
                    }
                    return "shell:<span title=\"" + cwd + "\">" + shortCwd + "</span>#";
                },
                focusTerminal: function (event) {
                    event = event || window.event;
                    var selection = window.getSelection();
                    var target = event.target || event.srcElement;

                    if (target.tagName === "SELECT") {
                        return;
                    }

                    if (!selection.toString()) {
                        document.getElementById("shell-cmd").focus();
                    }
                },
                // pihole 
                getPiholeStatistics: function () {
                    var _this = this;
                    return axios.post("/get_pihole_statistics").then(function (ret) {
                        _this.pihole_loading = false;
                        if (ret.data.ok == 1) {
                          _this.pihole_status = true;
                          var data = ret.data.data;
                          if (data.domain_list.top_queries) {
                            var t = [];
                            for (var i in data.domain_list.top_queries) {
                              t.push({domain: i, count: data.domain_list.top_queries[i]});
                            }
                            data.domain_list.top_queries = t;
                          }
                          _this.pihole_data = data;
                        } else {
                          _this.pihole_status = false;
                          _this.pihole_message = ret.data.message;
                        }
                    });
                },
                // common
                escapeHtml: function (string) {
                    return string
                        .replace(/&/g, "&amp;")
                        .replace(/</g, "&lt;")
                        .replace(/>/g, "&gt;");
                },
                formatSeconds: function (value) {
                    var theTime = parseInt(value);// 需要转换的时间秒 
                    var theTime1 = 0;// 分 
                    var theTime2 = 0;// 小时 
                    var theTime3 = 0;// 天
                    if (theTime > 60) {
                        theTime1 = parseInt(theTime / 60);
                        theTime = parseInt(theTime % 60);
                        if (theTime1 > 60) {
                            theTime2 = parseInt(theTime1 / 60);
                            theTime1 = parseInt(theTime1 % 60);
                            if (theTime2 > 24) {
                                //大于24小时
                                theTime3 = parseInt(theTime2 / 24);
                                theTime2 = parseInt(theTime2 % 24);
                            }
                        }
                    }
                    var result = '';
                    if (theTime > 0) {
                        result = "" + parseInt(theTime) + "秒";
                    }
                    if (theTime1 > 0) {
                        result = "" + parseInt(theTime1) + "分" + result;
                    }
                    if (theTime2 > 0) {
                        result = "" + parseInt(theTime2) + "小时" + result;
                    }
                    if (theTime3 > 0) {
                        result = "" + parseInt(theTime3) + "天" + result;
                    }
                    return result;
                },
                getLastDate: function (date) {
                    let timestamp = (new Date(date)).getTime() / 1000;
                    timestamp = timestamp - timestamp % 5;
                    let newDate = new Date(timestamp * 1000);
                    return newDate.getMinutes().toString().padStart(2, "0") + ":" + newDate.getSeconds().toString().padStart(2, "0");
                },
                getfilesize: function (size) {
                    if (!size)
                        return "";
                    var num = 1024.00; //byte
                    if (size < num)
                        return size + "B";
                    if (size < Math.pow(num, 2))
                        return (size / num).toFixed(2) + "K"; //kb
                    if (size < Math.pow(num, 3))
                        return (size / Math.pow(num, 2)).toFixed(2) + "M"; //M
                    if (size < Math.pow(num, 4))
                        return (size / Math.pow(num, 3)).toFixed(2) + "G"; //G
                    return (size / Math.pow(num, 4)).toFixed(2) + "T"; //T
                },
                accMul: function (arg1, arg2) {
                    var m = 0, s1 = arg1.toString(), s2 = arg2.toString();
                    try { m += s1.split(".")[1].length } catch (e) { }
                    try { m += s2.split(".")[1].length } catch (e) { }
                    return Number(s1.replace(".", "")) * Number(s2.replace(".", "")) / Math.pow(10, m)
                },
                tofixed: function (num, n) {
                    var symbol = 1
                    if (num < 0) {
                        // 符号为负
                        symbol = -1
                        num *= -1
                    }
                    var num2 = (Math.round(num * Math.pow(10, n))
                        / Math.pow(10, n) + Math.pow(10, -(n + 1)))
                        .toString().slice(0, -1)
                    return parseFloat(num2 * symbol).toFixed(n)
                },
                reLogin: function () {
                    alert("登录失效");
                    location.href = "/login";
                },
                clearUserInterval: function () {
                    for (var i=0,len=this.intervals.length; i<len; i++) {
                        clearInterval(this.intervals[i]);
                      }
                },
                toFormData: function (o, fields) {
                    var isLimitField = fields.length > 0 ? true : false;
                    var t = [];
                    for (var i in o) {
                        if (isLimitField) {
                            if (fields.indexOf(i) >= 0) {
                                t.push(i + "=" + o[i]);
                            }
                        } else {
                            t.push(i + "=" + o[i]);
                        }
                    }
                    return t.join("&");
                },
                handleSelect: function (key, keyPath) {
                    this.activeIndex = key;
                    this.initTabInterval();
                },
                initTabInterval: function () {
                    var _this = this;
                    var map = {
                      0: [this.getPiholeStatistics],
                      1: [this.getData, this.getClientApplyCount],
                      2: [this.getCpuChart],
                      3: [this.getMemoryChart],
                      4: [this.getByteChart, this.getByteChart],
                    }
                    var params = {
                      4: [[0], [1]],
                    }
                    this.clearUserInterval();

                    var intervalTasks = map[this.activeIndex];
                    if (intervalTasks) {
                        for (var i=0,len=intervalTasks.length; i<len; i++) {
                            var call = function () {
                                var cb = intervalTasks[i];
                                try {
                                    var p = params[_this.activeIndex][i];
                                } catch (e) {
                                    var p = [];
                                }
                                return function () {
                                    cb.apply(_this, p);
                                };
                            }
                            call()();
                            _this.intervals.push(setInterval(call(), 5000));    
                        }
                    }

                    if (this.activeIndex == 6) {
                      _this.getSetting();
                    }
                },
                bytesToSize: function(bytes) {
                   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
                   if (bytes <= 0) return '0 Byte';
                   
                   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
                   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];
                }
            },
            mounted: function () {
                var _this = this;
                var isPop403 = false;
                this.tab_show = true;
                axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';
                axios.interceptors.response.use(function (response) {
                    return response;
                }, function (error) {
                    if (error.response.status == 403 && !isPop403) {
                        _this.clearUserInterval();
                        _this.reLogin();

                        isPop403 = true;
                    } else {
                        _this.clearUserInterval();
                        alert("网络错误");
                    }
                });
                document.querySelectorAll(".dialog-footer").forEach((node) => { node.style.display = "block" });

                this.initTabInterval();
                
                // terminal
                this.updateCwd();
            },
        })
    </script>
</body>

</html>
