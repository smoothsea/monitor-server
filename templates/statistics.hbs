<html>

<head>
    <title>Statistics</title>
    <style>
        .el-row {
            margin-bottom: 20px;

            &:last-child {
                margin-bottom: 0;
            }
        }

        #customers {
            font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }

        #customers td,
        #customers th {
            border: 1px solid rgba(68, 196, 231, 0.8);
            padding: 8px;
        }

        #customers tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        #customers tr:hover {
            background-color: #ddd;
        }

        #customers th {
            padding-top: 12px;
            padding-bottom: 12px;
            text-align: left;
            background-color: rgba(68, 196, 231, 0.8);
            color: white;
        }

        a {
            color: rgba(68, 196, 231, 0.8);
            text-decoration: none;
        }

        .offline {
            color: gray;
        }

        .online {}

        .dialog-footer {
            display: none;
        }

        .memory-chat {
            margin-top: 90px;
            text-align: center;
            padding-left: 50px;
            height: 350px;
        }
        [v-cloak] {
            display:none;
        }
    </style>
    <link rel="stylesheet" href="/public/elementui.css">
    <script src="/public/zepto.js"></script>
    <script src="/public/vue.js"></script>
    <script src="/public/axios.js"></script>
    <script src="/public/elementui.js"></script>
    <script src="/public/echats.js"></script>
    <script src="/public/vue-echats.js"></script>
    <script src="/public/term.js"></script>
</head>
<body>
    <div id="app" v-clock>
        <el-menu :default-active="activeIndex" class="el-menu-demo" mode="horizontal" @select="handleSelect" v-show="tab_show">
            <el-menu-item index="1">客户端</el-menu-item>
            <el-menu-item index="2">CPU图</el-menu-item>
            <el-menu-item index="3">内存图</el-menu-item>
            <el-menu-item index="4">Terminal</el-menu-item>
        </el-menu>
        <div class="line"></div>

        <div v-show="activeIndex==1" class="submenu">
            <el-row type="flex" justify="center">
                <el-table :data="list" :row-class-name="tableRowClassName" v-loading="list_loading">
                    <el-table-column prop="client_ip" header-align="left" fixed label="客户端ip" width="120px">
                    </el-table-column>
                    <el-table-column prop="name" header-align="left" fixed label="名称" width="200px">
                    </el-table-column>
                    <el-table-column prop="cpu" header-align="left" label="cpu" width="100px">
                    </el-table-column>
                    <el-table-column prop="memory" header-align="left" label="内存" width="210px">
                    </el-table-column>
                    <el-table-column header-align="left" label="包管理器" width="200px">
                        <template slot-scope="scope">
                            <span v-html="scope.row.package_manager"></span> <a style="cursor: pointer;"
                                @click="run(3, scope.row.id)" v-if="scope.row.package_manager">更新</a>
                        </template>
                    </el-table-column>
                    <el-table-column prop="last_online_time" header-align="left" label="上次同步时间" width="220px">
                    </el-table-column>
                    <el-table-column prop="uptime" header-align="left" label="开机时长" width="240px">
                    </el-table-column>
                    <el-table-column prop="boot_time" header-align="left" label="启动时间" width="180px">
                    </el-table-column>
                    <el-table-column prop="is_enable_text" header-align="left" label="启用" width="70px">
                    </el-table-column>
                    <el-table-column prop="system_version" header-align="left" label="系统版本" width="280px">
                    </el-table-column>
                    <el-table-column label="管理" header-align="left" width="230px">
                        <template slot-scope="scope">
                            <el-button size="mini" @click="task(scope.row.id)">任务</el-button>
                            <el-button size="mini" @click="editPop(scope.row.id)">编辑</el-button>
                            <el-button size="mini" type="danger" @click="del(scope.row.id)">删除</el-button>
                        </template>
                    </el-table-column>
                    <el-table-column label="操作" header-align="left" fixed="right" width="240px">
                        <template slot-scope="scope">
                            <template v-if="scope.row.is_online == 1">
                                <el-button size="mini" type="warning" @click="run(2, scope.row.id)">重启</el-button>
                                <el-button size="mini" type="danger" @click="run(1, scope.row.id)">关机</el-button>
                                <el-button size="mini" type="primary" @click="connectTerminal(scope.row.id, scope.row.ssh_address)">Terminal</el-button>
                            </template>
                        </template>
                    </el-table-column>
                </el-table>
            </el-row>
            <el-row type="flex" justify="end">
                <a style="cursor: pointer;font-size:15px" @click="addClientPop()" v-show="!list_loading">添加客户端</a>
            </el-row>
        </div>

        <el-dialog title="编辑" :visible.sync="edit_pop" width="30%">
            <el-form ref="edit_form" :model="edit_form" label-width="80px">
                <el-form-item label="名称">
                    <el-input v-model="edit_form.name"></el-input>
                </el-form-item>
                <el-form-item label="客户ip">
                    <el-input v-model="edit_form.client_ip"></el-input>
                </el-form-item>
                <el-form-item label="SSH地址">
                    <el-input v-model="edit_form.ssh_address"></el-input>
                </el-form-item>
                <el-form-item label="SSH用户">
                    <el-input v-model="edit_form.ssh_username"></el-input>
                </el-form-item>
                <el-form-item label="SSH密码">
                    <el-input v-model="edit_form.ssh_password" type="password"></el-input>
                </el-form-item>
                <el-form-item label="启用">
                    <el-switch v-model="edit_form.is_enable" :active-value="1" :inactive-value="0"></el-switch>
                </el-form-item>
            </el-form>
            <span slot="footer" class="dialog-footer">
                <el-button @click="edit_pop = false">取 消</el-button>
                <el-button type="primary" @click="edit">确 定</el-button>
            </span>
        </el-dialog>

        <el-dialog title="新增客户端" :visible.sync="add_client_pop" width="30%">
            <el-form ref="add_client_from" :model="add_client_form" label-width="80px">
                <el-form-item label="名称">
                    <el-input v-model="add_client_form.name"></el-input>
                </el-form-item>
                <el-form-item label="客户ip">
                    <el-input v-model="add_client_form.client_ip"></el-input>
                </el-form-item>
                <el-form-item label="SSH地址">
                    <el-input v-model="add_client_form.ssh_address"></el-input>
                </el-form-item>
                <el-form-item label="SSH用户">
                    <el-input v-model="add_client_form.ssh_username"></el-input>
                </el-form-item>
                <el-form-item label="SSH密码">
                    <el-input v-model="add_client_form.ssh_password" type="password"></el-input>
                </el-form-item>
            </el-form>
            <span slot="footer" class="dialog-footer">
                <el-button @click="add_client_pop = false">取 消</el-button>
                <el-button type="primary" @click="addClient">确 定</el-button>
            </span>
        </el-dialog>

        <el-dialog title="任务列表" :visible.sync="task_pop" @close="taskList=[];task_list_loading=true">
            <el-table :data="taskList" border style="max-height: 535px;" :row-class-name="taskRowClassName"
                v-loading="task_list_loading">
                <el-table-column prop="task_type" label="任务类型">
                </el-table-column>
                <el-table-column prop="created_at" label="创建时间">
                </el-table-column>
                <el-table-column prop="pulled_at" label="执行时间">
                </el-table-column>
                <el-table-column prop="cancled_at" label="取消时间">
                </el-table-column>
                <el-table-column label="操作">
                    <template slot-scope="scope">
                        <template v-if="!scope.row.pulled_at && scope.row.is_valid">
                            <el-button size="mini" type="warning"
                                @click="cancel_task(scope.row.id, scope.row.client_id)">取消任务</el-button>
                            </el-button>
                        </template>
                    </template>
                </el-table-column>
            </el-table>
        </el-dialog>

        <div class="memory-chat submenu" v-if="activeIndex==2 && cpu_chart_show">
            <v-chart :options="cpu_chart" />
        </div>

        <div class="memory-chat submenu" v-if="activeIndex==3 &&  memory_chart_show">
            <v-chart :options="memory_chart" />
        </div>

        <div v-show="activeIndex==4" id="terminal" style="background-color: #555">
        </div>
    </div>
    <style>
        .echarts {
            width: 100%;
            height: 100%;
        }

        .submenu {
            padding: 10px;
        }
    </style>

    <script>
        Vue.component('v-chart', VueECharts)
        var app = new Vue({
            el: '#app',
            data: {
                teriminalId: 0,
                terminal: null,
                activeIndex: 1,
                sort: ["is_online desc", "id asc"],
                list: [
                ],
                taskList: [
                ],
                dataInter: null,
                memoryChartInter: null,
                cpuChartInter: null,
                user: "",
                edit_pop: false,
                add_client_pop: false,
                task_pop: false,
                task_list_loading: true,
                list_loading: true,
                edit_form: {
                    id: "",
                    name: "",
                    client_ip: "",
                    is_enable: "",
                    ssh_address: "",
                    ssh_username: "",
                    ssh_password: "",
                },
                add_client_form: {
                    name: "",
                    client_ip: "",
                    ssh_address: "",
                    ssh_username: "",
                    ssh_password: "",
                },
                memory_chart: {
                },
                memory_chart_show: false,
                cpu_chart: {
                },
                cpu_chart_show: false,
                tab_show: false,
            },
            methods: {
                tableRowClassName: function ({ row, rowIndex }) {
                    if (row.is_online == 1) {
                        return "online";
                    } else {
                        return "offline";
                    }
                },
                taskRowClassName: function ({ row, rowIndex }) {
                    if (!row.pulled_at && row.is_valid) {
                        return "online";
                    } else {
                        return "offline";
                    }
                },
                getData: function () {
                    var _this = this;
                    axios.post("/get_statistics", {}).then(function (ret) {
                        if (ret.status) {
                            ret = ret.data;
                            ret = ret.sort(function (item1, item2) {
                                let v1 = "";
                                let v2 = "";
                                for (var i = 0, len = _this.sort.length; i < len; i++) {
                                    var s = _this.sort[i].split(" ");
                                    if (s[1] == "asc") {
                                        v1 += item1[s[0]];
                                        v2 += item2[s[0]];
                                    } else {
                                        v1 += item2[s[0]];
                                        v2 += item1[s[0]];
                                    }
                                }

                                return v1 > v2 ? 1 : -1;
                            });
                            for (var i = 0, len = ret.length; i < len; i++) {
                                var is_online = ret[i]["is_online"];
                                ret[i]["uptime"] = is_online ? _this.formatSeconds(ret[i]["uptime"]) : "";
                                ret[i]["is_enable_text"] = ret[i]["is_enable"] ? "是" : "否";
                                ret[i]["cpu"] = is_online ? _this.accMul(_this.tofixed(ret[i]["cpu_user"] + ret[i]["cpu_system"], 4), 100) + "%" : "";
                                ret[i]["memory"] = is_online ? _this.getfilesize(ret[i]["memory_total"] - ret[i]["memory_free"]) + "/" + _this.getfilesize(ret[i]["memory_total"]) + " ( " + _this.tofixed((((ret[i]["memory_total"] - ret[i]["memory_free"]) / ret[i]["memory_total"]) * 100), 2) + "% )" : "";
                                ret[i]["package_manager"] = is_online && ret[i]["package_manager_update_count"] ? ret[i]["package_manager_update_count"] + " updates avaliable" : "";
                            }
                            _this.list = ret;
                        }
                    }).then(function () {
                        _this.list_loading = false;
                    });
                },
                getLastDate: function (date) {
                    let timestamp = (new Date(date)).getTime() / 1000;
                    timestamp = timestamp - timestamp % 5;
                    let newDate = new Date(timestamp * 1000);
                    return newDate.getMinutes().toString().padStart(2, "0") + ":" + newDate.getSeconds().toString().padStart(2, "0");
                },
                getMemoryChart: function () {
                    var _this = this;
                    axios.post("/get_memory_chart", {}).then(function (ret) {
                        if (ret.status) {
                            ret = ret.data;
                            let legend = [];
                            let xAxis = [];
                            let series = {};
                            for (let i = 0, len = ret.length; i < len; i++) {
                                let name = ret[i]["name"];
                                let rate = _this.tofixed((ret[i]["memory_total"] - ret[i]["memory_free"]) / ret[i]["memory_total"] * 100, 0);
                                let date = _this.getLastDate(ret[i]["time"]);
                                if (legend.indexOf(name) == -1) {
                                    legend.push(name);
                                    series[name] = {
                                        name: name,
                                        type: "line",
                                        symbol: "none",
                                        data: [rate]
                                    };
                                } else {
                                    series[name]["data"].push(rate);
                                }

                                if (xAxis.indexOf(date) == -1) {
                                    xAxis.push(date);
                                }
                            }

                            series = Object.values(series);
                            lengend = legend.sort((left, right) => {
                                return left > right ? 1 : -1;
                            })
                            series = series.sort((left, right) => {
                                return left.name > right.name ? 1 : -1;
                            })

                            if (ret.length > 0) {
                                _this.memory_chart = {
                                    title: { "text": "内存占用" },
                                    legend: {
                                        data: legend,
                                    },
                                    yAxis: {},
                                    xAxis: {
                                        data: xAxis,
                                    },
                                    series: series,

                                };
                                _this.memory_chart_show = true;
                            }
                        }
                    }).then(function () {
                    });
                },
                getCpuChart: function () {
                    var _this = this;
                    axios.post("/get_cpu_chart", {}).then(function (ret) {
                        if (ret.status) {
                            ret = ret.data;
                            let legend = [];
                            let xAxis = [];
                            let series = {};
                            for (let i = 0, len = ret.length; i < len; i++) {
                                let name = ret[i]["name"];
                                let rate = _this.accMul(_this.tofixed(ret[i]["cpu_user"] + ret[i]["cpu_system"], 2), 100);
                                let date = _this.getLastDate(ret[i]["time"]);
                                if (legend.indexOf(name) == -1) {
                                    legend.push(name);
                                    series[name] = {
                                        name: name,
                                        type: "line",
                                        symbol: "none",
                                        data: [rate]
                                    };
                                } else {
                                    series[name]["data"].push(rate);
                                }

                                if (xAxis.indexOf(date) == -1) {
                                    xAxis.push(date);
                                }
                            }


                            series = Object.values(series);
                            lengend = legend.sort((left, right) => {
                                return left > right ? 1 : -1;
                            })
                            series = series.sort((left, right) => {
                                return left.name > right.name ? 1 : -1;
                            })

                            if (ret.length > 0) {
                                _this.cpu_chart = {
                                    title: { "text": "CPU占用" },
                                    legend: {
                                        data: legend,
                                    },
                                    yAxis: {},
                                    xAxis: {
                                        data: xAxis,
                                    },
                                    series: series,

                                };
                                _this.cpu_chart_show = true;
                            }
                        }
                    }).then(function () {
                    });
                },
                formatSeconds: function (value) {
                    var theTime = parseInt(value);// 需要转换的时间秒 
                    var theTime1 = 0;// 分 
                    var theTime2 = 0;// 小时 
                    var theTime3 = 0;// 天
                    if (theTime > 60) {
                        theTime1 = parseInt(theTime / 60);
                        theTime = parseInt(theTime % 60);
                        if (theTime1 > 60) {
                            theTime2 = parseInt(theTime1 / 60);
                            theTime1 = parseInt(theTime1 % 60);
                            if (theTime2 > 24) {
                                //大于24小时
                                theTime3 = parseInt(theTime2 / 24);
                                theTime2 = parseInt(theTime2 % 24);
                            }
                        }
                    }
                    var result = '';
                    if (theTime > 0) {
                        result = "" + parseInt(theTime) + "秒";
                    }
                    if (theTime1 > 0) {
                        result = "" + parseInt(theTime1) + "分" + result;
                    }
                    if (theTime2 > 0) {
                        result = "" + parseInt(theTime2) + "小时" + result;
                    }
                    if (theTime3 > 0) {
                        result = "" + parseInt(theTime3) + "天" + result;
                    }
                    return result;
                },
                getfilesize: function (size) {
                    if (!size)
                        return "";
                    var num = 1024.00; //byte
                    if (size < num)
                        return size + "B";
                    if (size < Math.pow(num, 2))
                        return (size / num).toFixed(2) + "K"; //kb
                    if (size < Math.pow(num, 3))
                        return (size / Math.pow(num, 2)).toFixed(2) + "M"; //M
                    if (size < Math.pow(num, 4))
                        return (size / Math.pow(num, 3)).toFixed(2) + "G"; //G
                    return (size / Math.pow(num, 4)).toFixed(2) + "T"; //T
                },
                accMul: function (arg1, arg2) {
                    var m = 0, s1 = arg1.toString(), s2 = arg2.toString();
                    try { m += s1.split(".")[1].length } catch (e) { }
                    try { m += s2.split(".")[1].length } catch (e) { }
                    return Number(s1.replace(".", "")) * Number(s2.replace(".", "")) / Math.pow(10, m)
                },
                tofixed: function (num, n) {
                    var symbol = 1
                    if (num < 0) {
                        // 符号为负
                        symbol = -1
                        num *= -1
                    }
                    var num2 = (Math.round(num * Math.pow(10, n))
                        / Math.pow(10, n) + Math.pow(10, -(n + 1)))
                        .toString().slice(0, -1)
                    return parseFloat(num2 * symbol).toFixed(n)
                },
                reLogin: function () {
                    alert("登录失效");
                    location.href = "/login";
                },
                clearUserInterval: function () {
                    clearInterval(this.dataInter);
                    clearInterval(this.memoryChartInter);
                    clearInterval(this.cpuChartInter);
                },
                run: function (type, id) {
                    var _this = this
                    var operation
                    switch (type) {
                        case 1:
                            operation = "shutdown"
                            break
                        case 2:
                            operation = "reboot"
                            break
                        case 3:
                            operation = "update"
                            break
                    }
                    this.$confirm('是否继续?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        axios.post("/operate", "client_id=" + id + "&operation=" + operation)
                            .then(function (ret) {
                                if (ret) {
                                    ret = ret.data;
                                    if (!ret.ok) {
                                        _this.$message({
                                            type: 'error',
                                            message: ret.message
                                        });
                                    }
                                }
                            })
                    });
                },
                del: function (id) {
                    var _this = this;
                    this.$confirm('此操作将永久删除该主机, 是否继续?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                    }).then(() => {
                        axios.post("/delete_client", "client_id=" + id)
                            .then(function (ret) {
                                if (ret) {
                                    ret = ret.data;
                                    if (ret.ok) {
                                        _this.getData();
                                    } else {
                                        _this.$message({
                                            type: 'error',
                                            message: ret.message
                                        });
                                    }
                                }
                            })

                    });
                },
                editPop: function (id) {
                    for (let i = 0, len = this.list.length; i < len; i++) {
                        if (this.list[i]["id"] == id) {
                            this.edit_form = this.list[i];
                        }
                    }
                    this.edit_pop = true;
                },
                addClientPop: function () {
                    this.add_client_pop = true;
                },
                edit: function () {
                    var _this = this;
                    this.edit_form.client_id = this.edit_form.id;

                    axios.post("/edit_client", this.toFormData(this.edit_form, ["client_id", "name", "client_ip", "is_enable", "ssh_address", "ssh_username", "ssh_password"]))
                        .then(function (ret) {
                            if (ret) {
                                ret = ret.data;
                                if (ret.ok) {
                                    _this.getData();
                                    _this.edit_pop = false;
                                } else {
                                    _this.$message({
                                        type: 'error',
                                        message: ret.message
                                    });
                                }
                            }
                        })
                },
                addClient: function () {
                    var _this = this;
                    axios.post("/add_client", this.toFormData(this.add_client_form, ["name", "client_ip", "ssh_address", "ssh_username", "ssh_password"]))
                        .then(function (ret) {
                            if (ret) {
                                ret = ret.data;
                                if (ret.ok) {
                                    _this.getData();
                                    _this.add_client_pop = false;
                                    _this.add_client_form = {
                                        name: "",
                                        client_ip: "",
                                    };
                                } else {
                                    _this.$message({
                                        type: 'error',
                                        message: ret.message
                                    });
                                }
                            }
                        })
                },
                task: function (id) {
                    var _this = this;
                    _this.task_pop = true;
                    axios.post("/tasks", "client_id=" + id).then(function (ret) {
                        if (ret.status) {
                            ret = ret.data;
                            _this.taskList = ret;
                        }
                    }).then(function () {
                        _this.task_list_loading = false;
                    });

                },
                cancel_task: function (id, client_id) {
                    var _this = this;
                    axios.post("/cancel_task", "task_id=" + id)
                        .then(function (ret) {
                            if (ret) {
                                ret = ret.data;
                                if (ret.ok) {
                                    _this.task(client_id);
                                } else {
                                    _this.$message({
                                        type: 'error',
                                        message: ret.message
                                    });
                                }
                            }
                        })
                },
                toFormData: function (o, fields) {
                    var isLimitField = fields.length > 0 ? true : false;
                    var t = [];
                    for (var i in o) {
                        if (isLimitField) {
                            if (fields.indexOf(i) >= 0) {
                                t.push(i + "=" + o[i]);
                            }
                        } else {
                            t.push(i + "=" + o[i]);
                        }
                    }
                    return t.join("&");
                },
                handleSelect: function (key, keyPath) {
                    this.activeIndex = key;
                },
                initTerminal: function () {
                    var _this = this;
                    this.terminal = new Terminal({
                        cols: 80,
                        rows: 40,
                        screenKeys: true
                    });

                    var command = "";
                    this.terminal.on('data', function (data) {
                        if (data != "\r") {
                            command += data;
                        } else {
                            data = "\r\n";
                            if (command != "") {
                                _this.runTerminalCommand(_this.teriminalId, command).finally(function () {
                                    command = "";
                                });
                            }

                        }
                        _this.terminal.write(data)
                    });

                    this.terminal.open(document.getElementById("terminal"));
                },
                connectTerminal: function (id, address) {
                    let _this = this;
                    if (this.teriminalId != id) {
                        axios.post("/connect_ssh_client", "client_id=" + id)
                        .then(function (ret) {
                            if (ret) {
                                ret = ret.data;
                                if (ret.ok) {
                                    _this.activeIndex = 4;
                                    _this.teriminalId = id;
                                    _this.terminal.write(address + " connect ok\r\n");
                                } else {
                                    _this.$message({
                                        type: 'error',
                                        message: ret.message
                                    })
                                }
                            }
                        })
                    } else {
                        _this.terminal.write("Connect ok\r\n");
                    }
                },
                runTerminalCommand: function (id, command) {
                    var _this = this;
                    return axios.post("/run_ssh_command", "client_id=" + Number(id) + "&command=" + String(command))
                    .then(function (ret) {
                        if (ret) {
                            ret = ret.data;
                            if (ret.ok) {
                                var message = ret.message.replaceAll("\n", "\r\n")
                                _this.terminal.write("reply:  " + message + "\r\n");
                            } else {
                                _this.$message({
                                    type: 'error',
                                    message: ret.message
                                })
                            }
                        }
                    })
                }
            },
            mounted: function () {
                var _this = this;
                var isPop403 = false;
                this.tab_show = true;
                axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';
                axios.interceptors.response.use(function (response) {
                    return response;
                }, function (error) {
                    if (error.response.status == 403 && !isPop403) {
                        _this.clearUserInterval();
                        _this.reLogin();

                        isPop403 = true;
                    } else {
                        _this.clearUserInterval();
                        alert("网络错误");
                    }
                });
                document.querySelectorAll(".dialog-footer").forEach((node) => { node.style.display = "block" });

                this.getData();
                this.dataInter = setInterval(this.getData, 5000);

                this.getMemoryChart();
                this.memoryChartInter = setInterval(this.getMemoryChart, 10000);

                this.getCpuChart();
                this.cpuChartInter = setInterval(this.getCpuChart, 10000);

                this.initTerminal();
            },
        })
    </script>
</body>

</html>